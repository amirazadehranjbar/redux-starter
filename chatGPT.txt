// src/app/rootReducer.js
const {combineReducers} = require("redux");
const {usersReducer } = require("../features/users/userReducer");
const {bugReducer} = require("../features/bugs/bugReducer");
const {projectReducer} = require("../features/projects/projectReducer");

// Combine all feature reducers into a single root reducer
const RootReducer = combineReducers({
    bugs: bugReducer,
    projects: projectReducer,
    users: usersReducer,
});

module.exports = { RootReducer };

////////////////////////////////////////////////////////////////////////////////////////////////
// src/app/store.js
const { configureStore } = require("@reduxjs/toolkit");
const { RootReducer } = require("./rootReducer");
const logger = require("../middleware/logger");
const api = require("../middleware/api");

const store = configureStore({
    reducer: RootReducer,
    middleware: (getDefaultMiddleware) => {
        const defaults = getDefaultMiddleware();

        return defaults.concat(logger , api);
    },
});

module.exports = { store };
///////////////////////////////////////////////////////////////////////////////////////////////
// src/features/bugs/bugReducer.js
const { createSlice } = require("@reduxjs/toolkit");

let id = 0; // local bug ID counter

const bugReducer = createSlice({
    name: "bugs",
    initialState: {
        list:[],
        isLoading:false,
        lastFetch:null
    },
    reducers: {
        // Adds a new bug
        addBug: (bugs, action) => {
            bugs.list.push({
                id: ++id,
                description: action.payload.description,
                solved: false
            });
        },

        // Intended to remove a bug (but does not mutate state properly)
        removeBug: (bugs, action) => {
            bugs.list = bugs.list.filter(bug => bug.id !== action.payload.id);
        },

        // Updates a bug's solved status
        updateBug: (bugs, action) => {
            const bug = bugs.list.find(bug => bug.id === action.payload.id);
            if (bug) {
                bug.solved = action.payload.solvedValue;
            }
        },
      // api management
      bugRequested: (bugs, action) => {
    bugs.isLoading = true;
},
bugReceived: (bugs, action) => {
    bugs.list = action.payload;
    bugs.isLoading = false;
    bugs.lastFetch = Date.now();
},
bugRequestFailed: (bugs, action) => {
    bugs.isLoading = false;
}

    },
});

module.exports = {
    bugReducer: bugReducer.reducer,
    bugActions: bugReducer.actions,
};

////////////////////////////////////////////////////////////////////////////////////////////
// src/features/bugs/bugSelectors.js
const { createSelector } = require("reselect");

// Select the bugs state
const selectBugs = state => state.bugs;

// Return only unsolved bugs
const selectUnsolvedBugs = createSelector(
    [selectBugs],
    bugs => (bugs.list || []).filter(bug => !bug.solved)
);

module.exports = {
    selectUnsolvedBugs,
};

//////////////////////////////////////////////////////////////////////////////////////////////
// src/features/projects/projectReducer.js
const { createSlice } = require("@reduxjs/toolkit");

let projectID = 0;

const ProjectReducer = createSlice({
    name: "projects",
    initialState: [],
    reducers: {
        // Add a project with name and default progress
        addProject: (state, action) => {
            state.push({
                id: ++projectID,
                projectName: action.payload.projectName,
                progress: 0
            });
        },
    }
});

module.exports = {
    projectReducer: ProjectReducer.reducer,
    projectActions: ProjectReducer.actions,
};

//////////////////////////////////////////////////////////////////////////////////////////////
// src/features/projects/projectSelectors.js
const { createSelector } = require("reselect");

// Select all projects
const projectState = state => state.projects;

// Return projects that have progress >= 50
const getProgressed = createSelector(
    [projectState],
    projects => projects.filter(project => project.progress >= 50)
);
//////////////////////////////////////////////////////////////////////////////////////////
// src/features/users/userReducer.js
const { createSlice } = require("@reduxjs/toolkit");

let userID = 0;
const initialState = [];

const userReducer = createSlice({
    name: "users",
    initialState: initialState,
    reducers: {
        // Add a new user
        userAdd: (users, action) => {
            users.push({
                userID: ++userID,
                userName: action.payload.userName,
                userUploadedBugsIDs: [],
            });
        },

        // Add a bug to an existing user by ID
        addBug: (users, action) => {
            const { userID, bugID } = action.payload;
            const user = users.find(user => user.userID === userID);
            if (user) {
                user.userUploadedBugsIDs.push(bugID);
            }
        }
    }
});

module.exports = {
    usersReducer: userReducer.reducer,
    usersActions: userReducer.actions,
};

////////////////////////////////////////////////////////////////////////////////////////////////
// src/features/users/userSelectors.js
const { createSelector } = require("reselect");

const users = state => state.users;
const bugs = state => state.bugs;

// Select bugs that were uploaded by a given user
const getBugsByUser = (targetUserID) => createSelector(
    [users, bugs],
    (allUsers, allBugs) => {
        const targetUser = allUsers.find(user => user.userID === targetUserID);
        if (!targetUser) return [];
        return allBugs.list.filter(bug => targetUser.userUploadedBugsIDs.includes(bug.id));
    }
);

// Return userName by userID
const getUserNameByID = (targetUserID) => createSelector(
    [users],
    (allUsers) => {
        const foundedUser = allUsers.find(user => user.userID === targetUserID);
        return foundedUser ? foundedUser.userName : "user not found";
    }
);

module.exports = {
    getBugsByUser,
    getUserNameByID,
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// src/middleware/api.js
const axios = require("axios");

const api = store => next => async action => {
    if (action.type !== "bugs/bugsRequested") return next(action);

    next(action); // dispatch bugsRequested

    try {
        const response = await axios.get("http://localhost:9001/api/bugs");
        store.dispatch({ type: "bugs/bugReceived", payload: response.data });
    } catch (e) {
        store.dispatch({ type: "bugs/bugRequestFailed", payload: e.message });
    }
};

module.exports = api;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// src/middleware/logger.js
const logger = store => next => action => {
    console.group(action.type)
    console.info('dispatching', action)
    let result = next(action)
    console.log('next state', store.getState())
    console.groupEnd()
    return result
}
module.exports = logger;

///////////////////////////////////////////////////////////////////////////////////////////////////
// src/index.js
const { store } = require("./app/store");
const { bugActions } = require("./features/bugs/bugReducer");
const { usersActions } = require("./features/users/userReducer");
const { projectActions } = require("./features/projects/projectReducer");
const { selectUnsolvedBugs } = require("./features/bugs/bugSelectors");
const { getBugsByUser, getUserNameByID } = require("./features/users/userSelectors");

////////////////////////////////////////////////////////// ⚒️Project⚒️ /////////////////////////////////////////////
// Dispatch some project actions
store.dispatch(projectActions.addProject({ projectName: "project 1", progress: 10 }));
store.dispatch(projectActions.addProject({ projectName: "project 2", progress: 20 }));
store.dispatch(projectActions.addProject({ projectName: "project 3", progress: 30 }));

////////////////////////////////////////////////////////// 🐛Bug🐛 /////////////////////////////////////////////
// Dispatch some bug actions
store.dispatch(bugActions.addBug({ description: "bug 1" })); // Bug ID 1
store.dispatch(bugActions.addBug({ description: "bug 2" })); // Bug ID 2
store.dispatch(bugActions.addBug({ description: "bug 3" })); // Bug ID 3

// Update the 'solved' status of a bug
store.dispatch(bugActions.updateBug({ id: 2, solvedValue: true }));

// Run selector to retrieve unsolved bugs (but not logged here)
selectUnsolvedBugs(store.getState());

////////////////////////////////////////////////////////// 🧔User🧔 /////////////////////////////////////////////
// Dispatch some user actions
store.dispatch(usersActions.userAdd({ userName: "amir" }));
store.dispatch(usersActions.userAdd({ userName: "reza" }));
store.dispatch(usersActions.userAdd({ userName: "nima" }));

// Add bugs to users
store.dispatch(usersActions.addBug({ userID: 1, bugID: 1 }));
store.dispatch(usersActions.addBug({ userID: 1, bugID: 3 }));
store.dispatch(usersActions.addBug({ userID: 2, bugID: 2 }));

// Use selectors to get bugs and username by userID
const userBugsSelector = getBugsByUser(1);
const userBugs = userBugsSelector(store.getState());

const userNameSelector = getUserNameByID(2);
const userName = userNameSelector(store.getState());

///////////////////////////////////////////                      ////////////////////////////////////////////////////////
store.dispatch({ type: "bugs/bugsRequested" });


///////////////////////////////////////////// 🏴 log results 🏴 ////////////////////////////////////////////////////////
console.log("User bugs 🐛🐛🐛:", userBugs);
console.log(`User Name : ${userName}`);
console.log(store.getState());

/////////////////////*************************** Backend *********************************////////////////////////////////
////////////////////////////////////// 🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀 ///////////////////////////////////////
// index.js
const express = require("express");
const app = express();
const bodyParser = require("body-parser");
const cors = require("cors");

app.use(cors());
app.use(bodyParser.json());

const bugs = [
  { id: 1, description: "Bug 1", userId: 1, resolved: true },
  { id: 2, description: "Bug 2", userId: 1 },
  { id: 3, description: "Bug 3", userId: 2 },
  { id: 4, description: "Bug 4" }
];

app.get("/api/bugs", (req, res) => {
  res.json(bugs);
});

app.post("/api/bugs", (req, res) => {
  const bug = { id: Date.now(), resolved: false, ...req.body };
  bugs.push(bug);

  res.json(bug);
});

app.patch("/api/bugs/:id", (req, res) => {
  const index = bugs.findIndex(bug => bug.id === parseInt(req.params.id));
  const bug = bugs[index];
  if ("resolved" in req.body) bug.resolved = req.body.resolved;
  if ("userId" in req.body) bug.userId = req.body.userId;

  res.json(bug);
});

app.listen(9001, () => {
  console.log("Node server started on port 9001.");
});

